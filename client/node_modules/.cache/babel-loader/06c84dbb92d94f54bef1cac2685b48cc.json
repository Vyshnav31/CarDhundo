{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"style\", \"motion\", \"motionNodes\", \"motionType\", \"onMotionStart\", \"onMotionEnd\", \"active\", \"treeNodeRequiredProps\"];\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nimport { TreeContext } from './contextTypes';\nimport TreeNode from './TreeNode';\nimport useUnmount from './useUnmount';\nimport { getTreeNodeProps } from './utils/treeUtil';\n\nvar MotionTreeNode = function MotionTreeNode(_ref, ref) {\n  var className = _ref.className,\n      style = _ref.style,\n      motion = _ref.motion,\n      motionNodes = _ref.motionNodes,\n      motionType = _ref.motionType,\n      onOriginMotionStart = _ref.onMotionStart,\n      onOriginMotionEnd = _ref.onMotionEnd,\n      active = _ref.active,\n      treeNodeRequiredProps = _ref.treeNodeRequiredProps,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useContext = React.useContext(TreeContext),\n      prefixCls = _React$useContext.prefixCls; // Calculate target visible here.\n  // And apply in effect to make `leave` motion work.\n\n\n  var targetVisible = motionNodes && motionType !== 'hide';\n  useLayoutEffect(function () {\n    if (motionNodes) {\n      if (targetVisible !== visible) {\n        setVisible(targetVisible);\n      }\n    }\n  }, [motionNodes]);\n\n  var triggerMotionStart = function triggerMotionStart() {\n    if (motionNodes) {\n      onOriginMotionStart();\n    }\n  }; // Should only trigger once\n\n\n  var triggerMotionEndRef = React.useRef(false);\n\n  var triggerMotionEnd = function triggerMotionEnd() {\n    if (motionNodes && !triggerMotionEndRef.current) {\n      triggerMotionEndRef.current = true;\n      onOriginMotionEnd();\n    }\n  }; // Effect if unmount\n\n\n  useUnmount(triggerMotionStart, triggerMotionEnd); // Motion end event\n\n  var onVisibleChanged = function onVisibleChanged(nextVisible) {\n    if (targetVisible === nextVisible) {\n      triggerMotionEnd();\n    }\n  };\n\n  if (motionNodes) {\n    return /*#__PURE__*/React.createElement(CSSMotion, _extends({\n      ref: ref,\n      visible: visible\n    }, motion, {\n      motionAppear: motionType === 'show',\n      onVisibleChanged: onVisibleChanged\n    }), function (_ref2, motionRef) {\n      var motionClassName = _ref2.className,\n          motionStyle = _ref2.style;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: motionRef,\n        className: classNames(\"\".concat(prefixCls, \"-treenode-motion\"), motionClassName),\n        style: motionStyle\n      }, motionNodes.map(function (treeNode) {\n        var restProps = _extends({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)),\n            title = treeNode.title,\n            key = treeNode.key,\n            isStart = treeNode.isStart,\n            isEnd = treeNode.isEnd;\n\n        delete restProps.children;\n        var treeNodeProps = getTreeNodeProps(key, treeNodeRequiredProps);\n        return /*#__PURE__*/React.createElement(TreeNode, _extends({}, restProps, treeNodeProps, {\n          title: title,\n          active: active,\n          data: treeNode.data,\n          key: key,\n          isStart: isStart,\n          isEnd: isEnd\n        }));\n      }));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(TreeNode, _extends({\n    domRef: ref,\n    className: className,\n    style: style\n  }, props, {\n    active: active\n  }));\n};\n\nMotionTreeNode.displayName = 'MotionTreeNode';\nvar RefMotionTreeNode = /*#__PURE__*/React.forwardRef(MotionTreeNode);\nexport default RefMotionTreeNode;","map":{"version":3,"sources":["C:/Users/vyshn/OneDrive/Desktop/Mern project/CarDhundo/client/node_modules/rc-tree/es/MotionTreeNode.js"],"names":["_objectDestructuringEmpty","_extends","_slicedToArray","_objectWithoutProperties","_excluded","classNames","CSSMotion","useLayoutEffect","React","TreeContext","TreeNode","useUnmount","getTreeNodeProps","MotionTreeNode","_ref","ref","className","style","motion","motionNodes","motionType","onOriginMotionStart","onMotionStart","onOriginMotionEnd","onMotionEnd","active","treeNodeRequiredProps","props","_React$useState","useState","_React$useState2","visible","setVisible","_React$useContext","useContext","prefixCls","targetVisible","triggerMotionStart","triggerMotionEndRef","useRef","triggerMotionEnd","current","onVisibleChanged","nextVisible","createElement","motionAppear","_ref2","motionRef","motionClassName","motionStyle","concat","map","treeNode","restProps","data","title","key","isStart","isEnd","children","treeNodeProps","domRef","displayName","RefMotionTreeNode","forwardRef"],"mappings":"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","sourcesContent":["import _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"className\", \"style\", \"motion\", \"motionNodes\", \"motionType\", \"onMotionStart\", \"onMotionEnd\", \"active\", \"treeNodeRequiredProps\"];\nimport classNames from 'classnames';\nimport CSSMotion from 'rc-motion';\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nimport { TreeContext } from './contextTypes';\nimport TreeNode from './TreeNode';\nimport useUnmount from './useUnmount';\nimport { getTreeNodeProps } from './utils/treeUtil';\nvar MotionTreeNode = function MotionTreeNode(_ref, ref) {\n  var className = _ref.className,\n    style = _ref.style,\n    motion = _ref.motion,\n    motionNodes = _ref.motionNodes,\n    motionType = _ref.motionType,\n    onOriginMotionStart = _ref.onMotionStart,\n    onOriginMotionEnd = _ref.onMotionEnd,\n    active = _ref.active,\n    treeNodeRequiredProps = _ref.treeNodeRequiredProps,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    visible = _React$useState2[0],\n    setVisible = _React$useState2[1];\n  var _React$useContext = React.useContext(TreeContext),\n    prefixCls = _React$useContext.prefixCls;\n  // Calculate target visible here.\n  // And apply in effect to make `leave` motion work.\n  var targetVisible = motionNodes && motionType !== 'hide';\n  useLayoutEffect(function () {\n    if (motionNodes) {\n      if (targetVisible !== visible) {\n        setVisible(targetVisible);\n      }\n    }\n  }, [motionNodes]);\n  var triggerMotionStart = function triggerMotionStart() {\n    if (motionNodes) {\n      onOriginMotionStart();\n    }\n  };\n  // Should only trigger once\n  var triggerMotionEndRef = React.useRef(false);\n  var triggerMotionEnd = function triggerMotionEnd() {\n    if (motionNodes && !triggerMotionEndRef.current) {\n      triggerMotionEndRef.current = true;\n      onOriginMotionEnd();\n    }\n  };\n  // Effect if unmount\n  useUnmount(triggerMotionStart, triggerMotionEnd);\n  // Motion end event\n  var onVisibleChanged = function onVisibleChanged(nextVisible) {\n    if (targetVisible === nextVisible) {\n      triggerMotionEnd();\n    }\n  };\n  if (motionNodes) {\n    return /*#__PURE__*/React.createElement(CSSMotion, _extends({\n      ref: ref,\n      visible: visible\n    }, motion, {\n      motionAppear: motionType === 'show',\n      onVisibleChanged: onVisibleChanged\n    }), function (_ref2, motionRef) {\n      var motionClassName = _ref2.className,\n        motionStyle = _ref2.style;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: motionRef,\n        className: classNames(\"\".concat(prefixCls, \"-treenode-motion\"), motionClassName),\n        style: motionStyle\n      }, motionNodes.map(function (treeNode) {\n        var restProps = _extends({}, (_objectDestructuringEmpty(treeNode.data), treeNode.data)),\n          title = treeNode.title,\n          key = treeNode.key,\n          isStart = treeNode.isStart,\n          isEnd = treeNode.isEnd;\n        delete restProps.children;\n        var treeNodeProps = getTreeNodeProps(key, treeNodeRequiredProps);\n        return /*#__PURE__*/React.createElement(TreeNode, _extends({}, restProps, treeNodeProps, {\n          title: title,\n          active: active,\n          data: treeNode.data,\n          key: key,\n          isStart: isStart,\n          isEnd: isEnd\n        }));\n      }));\n    });\n  }\n  return /*#__PURE__*/React.createElement(TreeNode, _extends({\n    domRef: ref,\n    className: className,\n    style: style\n  }, props, {\n    active: active\n  }));\n};\nMotionTreeNode.displayName = 'MotionTreeNode';\nvar RefMotionTreeNode = /*#__PURE__*/React.forwardRef(MotionTreeNode);\nexport default RefMotionTreeNode;"]},"metadata":{},"sourceType":"module"}