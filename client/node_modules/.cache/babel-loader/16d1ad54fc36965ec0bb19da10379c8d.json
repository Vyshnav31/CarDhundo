{"ast":null,"code":"import padEnd from 'lodash/padEnd';\nimport * as React from 'react';\n\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n      formatter = props.formatter,\n      precision = props.precision,\n      decimalSeparator = props.decimalSeparator,\n      _props$groupSeparator = props.groupSeparator,\n      groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n      prefixCls = props.prefixCls;\n  var valueNode;\n\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/); // Process if illegal number\n\n    if (!cells || val === '-') {\n      valueNode = val;\n    } else {\n      var negative = cells[1];\n      var int = cells[2] || '0';\n      var decimal = cells[4] || '';\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision > 0 ? precision : 0);\n      }\n\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n\n      valueNode = [/*#__PURE__*/React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, negative, int), decimal && /*#__PURE__*/React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\n\nexport default StatisticNumber;","map":{"version":3,"sources":["C:/Users/vyshn/OneDrive/Desktop/Mern project/CarDhundo/client/node_modules/antd/es/statistic/Number.js"],"names":["padEnd","React","StatisticNumber","props","value","formatter","precision","decimalSeparator","_props$groupSeparator","groupSeparator","prefixCls","valueNode","val","String","cells","match","negative","int","decimal","replace","slice","concat","createElement","key","className"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AACA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACpD,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,MACEC,SAAS,GAAGF,KAAK,CAACE,SADpB;AAAA,MAEEC,SAAS,GAAGH,KAAK,CAACG,SAFpB;AAAA,MAGEC,gBAAgB,GAAGJ,KAAK,CAACI,gBAH3B;AAAA,MAIEC,qBAAqB,GAAGL,KAAK,CAACM,cAJhC;AAAA,MAKEA,cAAc,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAL3D;AAAA,MAMEE,SAAS,GAAGP,KAAK,CAACO,SANpB;AAOA,MAAIC,SAAJ;;AACA,MAAI,OAAON,SAAP,KAAqB,UAAzB,EAAqC;AACnC;AACAM,IAAAA,SAAS,GAAGN,SAAS,CAACD,KAAD,CAArB;AACD,GAHD,MAGO;AACL;AACA,QAAIQ,GAAG,GAAGC,MAAM,CAACT,KAAD,CAAhB;AACA,QAAIU,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAU,uBAAV,CAAZ,CAHK,CAIL;;AACA,QAAI,CAACD,KAAD,IAAUF,GAAG,KAAK,GAAtB,EAA2B;AACzBD,MAAAA,SAAS,GAAGC,GAAZ;AACD,KAFD,MAEO;AACL,UAAII,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;AACA,UAAIG,GAAG,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GAAtB;AACA,UAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACAG,MAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,uBAAZ,EAAqCV,cAArC,CAAN;;AACA,UAAI,OAAOH,SAAP,KAAqB,QAAzB,EAAmC;AACjCY,QAAAA,OAAO,GAAGlB,MAAM,CAACkB,OAAD,EAAUZ,SAAV,EAAqB,GAArB,CAAN,CAAgCc,KAAhC,CAAsC,CAAtC,EAAyCd,SAAS,GAAG,CAAZ,GAAgBA,SAAhB,GAA4B,CAArE,CAAV;AACD;;AACD,UAAIY,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,GAAGG,MAAH,CAAUd,gBAAV,EAA4Bc,MAA5B,CAAmCH,OAAnC,CAAV;AACD;;AACDP,MAAAA,SAAS,GAAG,CAAC,aAAaV,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AACpDC,QAAAA,GAAG,EAAE,KAD+C;AAEpDC,QAAAA,SAAS,EAAE,GAAGH,MAAH,CAAUX,SAAV,EAAqB,oBAArB;AAFyC,OAA5B,EAGvBM,QAHuB,EAGbC,GAHa,CAAd,EAGOC,OAAO,IAAI,aAAajB,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AACrEC,QAAAA,GAAG,EAAE,SADgE;AAErEC,QAAAA,SAAS,EAAE,GAAGH,MAAH,CAAUX,SAAV,EAAqB,wBAArB;AAF0D,OAA5B,EAGxCQ,OAHwC,CAH/B,CAAZ;AAOD;AACF;;AACD,SAAO,aAAajB,KAAK,CAACqB,aAAN,CAAoB,MAApB,EAA4B;AAC9CE,IAAAA,SAAS,EAAE,GAAGH,MAAH,CAAUX,SAAV,EAAqB,gBAArB;AADmC,GAA5B,EAEjBC,SAFiB,CAApB;AAGD,CA1CD;;AA2CA,eAAeT,eAAf","sourcesContent":["import padEnd from 'lodash/padEnd';\nimport * as React from 'react';\nvar StatisticNumber = function StatisticNumber(props) {\n  var value = props.value,\n    formatter = props.formatter,\n    precision = props.precision,\n    decimalSeparator = props.decimalSeparator,\n    _props$groupSeparator = props.groupSeparator,\n    groupSeparator = _props$groupSeparator === void 0 ? '' : _props$groupSeparator,\n    prefixCls = props.prefixCls;\n  var valueNode;\n  if (typeof formatter === 'function') {\n    // Customize formatter\n    valueNode = formatter(value);\n  } else {\n    // Internal formatter\n    var val = String(value);\n    var cells = val.match(/^(-?)(\\d*)(\\.(\\d+))?$/);\n    // Process if illegal number\n    if (!cells || val === '-') {\n      valueNode = val;\n    } else {\n      var negative = cells[1];\n      var int = cells[2] || '0';\n      var decimal = cells[4] || '';\n      int = int.replace(/\\B(?=(\\d{3})+(?!\\d))/g, groupSeparator);\n      if (typeof precision === 'number') {\n        decimal = padEnd(decimal, precision, '0').slice(0, precision > 0 ? precision : 0);\n      }\n      if (decimal) {\n        decimal = \"\".concat(decimalSeparator).concat(decimal);\n      }\n      valueNode = [/*#__PURE__*/React.createElement(\"span\", {\n        key: \"int\",\n        className: \"\".concat(prefixCls, \"-content-value-int\")\n      }, negative, int), decimal && /*#__PURE__*/React.createElement(\"span\", {\n        key: \"decimal\",\n        className: \"\".concat(prefixCls, \"-content-value-decimal\")\n      }, decimal)];\n    }\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-content-value\")\n  }, valueNode);\n};\nexport default StatisticNumber;"]},"metadata":{},"sourceType":"module"}