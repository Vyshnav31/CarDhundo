{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/* eslint-disable max-classes-per-file */\n\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\nimport { supportBigInt } from './supportUtil';\n/**\n * We can remove this when IE not support anymore\n */\n\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    this.origin = '';\n    this.number = void 0;\n    this.empty = void 0;\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    this.origin = '';\n    this.negative = void 0;\n    this.integer = void 0;\n    this.decimal = void 0;\n    this.decimalLen = void 0;\n    this.empty = void 0;\n    this.nan = void 0;\n\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-') {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}","map":{"version":3,"sources":["C:/Users/vyshn/OneDrive/Desktop/Mern project/CarDhundo/client/node_modules/rc-input-number/es/utils/MiniDecimal.js"],"names":["_classCallCheck","_createClass","getNumberPrecision","isE","num2str","trimNumber","validateNumber","supportBigInt","NumberDecimal","value","origin","number","empty","String","trim","Number","key","negate","toNumber","add","isInvalidate","target","isNaN","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","maxPrecision","Math","max","toFixed","isEmpty","equals","lessEquals","toString","safe","arguments","length","undefined","BigIntDecimal","negative","integer","decimal","decimalLen","nan","mergedValue","trimRet","numbers","trimStr","split","BigInt","decimalStr","getMark","getIntegerStr","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","clone","offset","maxDecimalLength","myAlignedDecimal","offsetAlignedDecimal","valueStr","_trimNumber","negativeStr","hydrateValueStr","slice","NaN","fullStr","getMiniDecimal","numStr","separatorStr","precision","cutOnly","_trimNumber2","integerStr","precisionDecimalStr","numberWithoutDecimal","advancedNum","advancedDecimal","repeat"],"mappings":"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","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n/* eslint-disable max-classes-per-file */\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from './numberUtil';\nimport { supportBigInt } from './supportUtil';\n/**\n * We can remove this when IE not support anymore\n */\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n    this.origin = '';\n    this.number = void 0;\n    this.empty = void 0;\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n      var target = Number(value);\n      if (Number.isNaN(target)) {\n        return this;\n      }\n      var number = this.number + target;\n      // [Legacy] Back to safe integer\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return num2str(this.number);\n    }\n  }]);\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n    this.origin = '';\n    this.negative = void 0;\n    this.integer = void 0;\n    this.decimal = void 0;\n    this.decimalLen = void 0;\n    this.empty = void 0;\n    this.nan = void 0;\n    if (!value && value !== 0 || !String(value).trim()) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value);\n    // Act like Number convert\n    if (value === '-') {\n      this.nan = true;\n      return;\n    }\n    var mergedValue = value;\n    // We need convert back to Number since it require `toFixed` to handle this\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n      var offset = new BigIntDecimal(value);\n      if (offset.isInvalidate()) {\n        return this;\n      }\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString();\n      // We need fill string length back to `maxDecimalLength` to avoid parser failed\n      var _trimNumber = trimNumber(valueStr),\n        negativeStr = _trimNumber.negativeStr,\n        trimStr = _trimNumber.trimStr;\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (numStr === '') {\n    return '';\n  }\n  var _trimNumber2 = trimNumber(numStr),\n    negativeStr = _trimNumber2.negativeStr,\n    integerStr = _trimNumber2.integerStr,\n    decimalStr = _trimNumber2.decimalStr;\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}"]},"metadata":{},"sourceType":"module"}