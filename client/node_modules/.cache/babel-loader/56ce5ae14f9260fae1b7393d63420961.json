{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\n\nfunction getUseId() {\n  // We need fully clone React function here to avoid webpack warning React 17 do not export `useId`\n  var fullClone = _objectSpread({}, React);\n\n  return fullClone.useId;\n}\n\nvar uuid = 0;\n/** @private Note only worked in develop env. Not work in production. */\n\nexport function resetUuid() {\n  if (process.env.NODE_ENV !== 'production') {\n    uuid = 0;\n  }\n}\nvar useOriginId = getUseId();\nexport default useOriginId ? // Use React `useId`\nfunction useId(id) {\n  var reactId = useOriginId(); // Developer passed id is single source of truth\n\n  if (id) {\n    return id;\n  } // Test env always return mock id\n\n\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  }\n\n  return reactId;\n} : // Use compatible of `useId`\nfunction useCompatId(id) {\n  // Inner id for accessibility usage. Only work in client side\n  var _React$useState = React.useState('ssr-id'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      innerId = _React$useState2[0],\n      setInnerId = _React$useState2[1];\n\n  React.useEffect(function () {\n    var nextId = uuid;\n    uuid += 1;\n    setInnerId(\"rc_unique_\".concat(nextId));\n  }, []); // Developer passed id is single source of truth\n\n  if (id) {\n    return id;\n  } // Test env always return mock id\n\n\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  } // Return react native id or inner id\n\n\n  return innerId;\n};","map":{"version":3,"sources":["C:/Users/vyshn/OneDrive/Desktop/Mern project/CarDhundo/client/node_modules/rc-util/es/hooks/useId.js"],"names":["_slicedToArray","_objectSpread","React","getUseId","fullClone","useId","uuid","resetUuid","process","env","NODE_ENV","useOriginId","id","reactId","useCompatId","_React$useState","useState","_React$useState2","innerId","setInnerId","useEffect","nextId","concat"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AACA,SAASC,QAAT,GAAoB;AAClB;AACA,MAAIC,SAAS,GAAGH,aAAa,CAAC,EAAD,EAAKC,KAAL,CAA7B;;AACA,SAAOE,SAAS,CAACC,KAAjB;AACD;;AACD,IAAIC,IAAI,GAAG,CAAX;AAEA;;AACA,OAAO,SAASC,SAAT,GAAqB;AAC1B,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCJ,IAAAA,IAAI,GAAG,CAAP;AACD;AACF;AACD,IAAIK,WAAW,GAAGR,QAAQ,EAA1B;AACA,eAAeQ,WAAW,GAC1B;AACA,SAASN,KAAT,CAAeO,EAAf,EAAmB;AACjB,MAAIC,OAAO,GAAGF,WAAW,EAAzB,CADiB,CAGjB;;AACA,MAAIC,EAAJ,EAAQ;AACN,WAAOA,EAAP;AACD,GANgB,CAQjB;;;AACA,MAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAO,SAAP;AACD;;AACD,SAAOG,OAAP;AACD,CAfyB,GAgB1B;AACA,SAASC,WAAT,CAAqBF,EAArB,EAAyB;AACvB;AACA,MAAIG,eAAe,GAAGb,KAAK,CAACc,QAAN,CAAe,QAAf,CAAtB;AAAA,MACEC,gBAAgB,GAAGjB,cAAc,CAACe,eAAD,EAAkB,CAAlB,CADnC;AAAA,MAEEG,OAAO,GAAGD,gBAAgB,CAAC,CAAD,CAF5B;AAAA,MAGEE,UAAU,GAAGF,gBAAgB,CAAC,CAAD,CAH/B;;AAIAf,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAY;AAC1B,QAAIC,MAAM,GAAGf,IAAb;AACAA,IAAAA,IAAI,IAAI,CAAR;AACAa,IAAAA,UAAU,CAAC,aAAaG,MAAb,CAAoBD,MAApB,CAAD,CAAV;AACD,GAJD,EAIG,EAJH,EANuB,CAYvB;;AACA,MAAIT,EAAJ,EAAQ;AACN,WAAOA,EAAP;AACD,GAfsB,CAiBvB;;;AACA,MAAIJ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAO,SAAP;AACD,GApBsB,CAsBvB;;;AACA,SAAOQ,OAAP;AACD,CAzCD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nfunction getUseId() {\n  // We need fully clone React function here to avoid webpack warning React 17 do not export `useId`\n  var fullClone = _objectSpread({}, React);\n  return fullClone.useId;\n}\nvar uuid = 0;\n\n/** @private Note only worked in develop env. Not work in production. */\nexport function resetUuid() {\n  if (process.env.NODE_ENV !== 'production') {\n    uuid = 0;\n  }\n}\nvar useOriginId = getUseId();\nexport default useOriginId ?\n// Use React `useId`\nfunction useId(id) {\n  var reactId = useOriginId();\n\n  // Developer passed id is single source of truth\n  if (id) {\n    return id;\n  }\n\n  // Test env always return mock id\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  }\n  return reactId;\n} :\n// Use compatible of `useId`\nfunction useCompatId(id) {\n  // Inner id for accessibility usage. Only work in client side\n  var _React$useState = React.useState('ssr-id'),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    innerId = _React$useState2[0],\n    setInnerId = _React$useState2[1];\n  React.useEffect(function () {\n    var nextId = uuid;\n    uuid += 1;\n    setInnerId(\"rc_unique_\".concat(nextId));\n  }, []);\n\n  // Developer passed id is single source of truth\n  if (id) {\n    return id;\n  }\n\n  // Test env always return mock id\n  if (process.env.NODE_ENV === 'test') {\n    return 'test-id';\n  }\n\n  // Return react native id or inner id\n  return innerId;\n};"]},"metadata":{},"sourceType":"module"}