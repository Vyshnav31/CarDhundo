{"ast":null,"code":"import ReactDOM from 'react-dom';\nexport default function addEventListenerWrap(target, eventType, cb, option) {\n  /* eslint camelcase: 2 */\n  var callback = ReactDOM.unstable_batchedUpdates ? function run(e) {\n    ReactDOM.unstable_batchedUpdates(cb, e);\n  } : cb;\n\n  if (target !== null && target !== void 0 && target.addEventListener) {\n    target.addEventListener(eventType, callback, option);\n  }\n\n  return {\n    remove: function remove() {\n      if (target !== null && target !== void 0 && target.removeEventListener) {\n        target.removeEventListener(eventType, callback, option);\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/vyshn/OneDrive/Desktop/Mern project/CarDhundo/client/node_modules/rc-util/es/Dom/addEventListener.js"],"names":["ReactDOM","addEventListenerWrap","target","eventType","cb","option","callback","unstable_batchedUpdates","run","e","addEventListener","remove","removeEventListener"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,eAAe,SAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,SAAtC,EAAiDC,EAAjD,EAAqDC,MAArD,EAA6D;AAC1E;AACA,MAAIC,QAAQ,GAAGN,QAAQ,CAACO,uBAAT,GAAmC,SAASC,GAAT,CAAaC,CAAb,EAAgB;AAChET,IAAAA,QAAQ,CAACO,uBAAT,CAAiCH,EAAjC,EAAqCK,CAArC;AACD,GAFc,GAEXL,EAFJ;;AAGA,MAAIF,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACQ,gBAAnD,EAAqE;AACnER,IAAAA,MAAM,CAACQ,gBAAP,CAAwBP,SAAxB,EAAmCG,QAAnC,EAA6CD,MAA7C;AACD;;AACD,SAAO;AACLM,IAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,UAAIT,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,IAAwCA,MAAM,CAACU,mBAAnD,EAAwE;AACtEV,QAAAA,MAAM,CAACU,mBAAP,CAA2BT,SAA3B,EAAsCG,QAAtC,EAAgDD,MAAhD;AACD;AACF;AALI,GAAP;AAOD","sourcesContent":["import ReactDOM from 'react-dom';\nexport default function addEventListenerWrap(target, eventType, cb, option) {\n  /* eslint camelcase: 2 */\n  var callback = ReactDOM.unstable_batchedUpdates ? function run(e) {\n    ReactDOM.unstable_batchedUpdates(cb, e);\n  } : cb;\n  if (target !== null && target !== void 0 && target.addEventListener) {\n    target.addEventListener(eventType, callback, option);\n  }\n  return {\n    remove: function remove() {\n      if (target !== null && target !== void 0 && target.removeEventListener) {\n        target.removeEventListener(eventType, callback, option);\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}